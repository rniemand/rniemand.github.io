---
title: '*.NDS Rom Info Scraping (C#)'
date: 2016-08-16
tags: [.net]
logo: dotnet.png
---

<p>
	I am starting a small <strong>ROM management</strong> project to help me keep my various ROM backups in order and make searching for a specific backup easier. I 
	decided it would be a good idea to programmatically extract information from the ROM file and then scrape the <code>www</code> to get more detailed metadata about 
	the ROM file in question.
</p>

<p>
	Being new to all of this I spent some time on Google and found the <a href="https://dsibrew.org/wiki/DSi_cartridge_header" target="_blank">following wiki page</a>, 
	that details the DSi Cartridge Header, thus allowing me to create a module for my ROM scraper that would be able to look for and extract all the basic information 
	I need to begin scraping the web for more metadata.
</p>

<p>From the wiki, I am interested mainly in the following bits of information:</p>

<table class="table table-sm table-hover table-striped w-auto">
	<thead>
		<tr>
			<th>Code</th>
			<th>Length</th>
			<th>Description</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td><code>0x000</code></td>
			<td class="text-center">12</td>
			<td>The title of the game</td>
		</tr>
		<tr>
			<td><code>0x00C</code></td>
			<td class="text-center">4</td>
			<td>The game code (used for lookups)</td>
		</tr>
		<tr>
			<td><code>0x010</code></td>
			<td class="text-center">2</td>
			<td>The code of the game developer</td>
		</tr>
		<tr>
			<td><code>0x01E</code></td>
			<td class="text-center">1</td>
			<td>ROM version</td>
		</tr>
		<tr>
			<td><code>0x230</code></td>
			<td class="text-center">8</td>
			<td>Title ID</td>
		</tr>
	</tbody>
</table>

<p>
	With this information at hand I quickly put together the following sample project to check that I could pull the required information out of the ROM file.
</p>

{% highlight "cs" %}
class Program {
    static void Main(string[] args)
    {
        var source = @"E:\temp\test-rom.nds";
        var fs = new FileStream(source, FileMode.Open);
        var br = new BinaryReader(fs);

        Console.WriteLine("Game Name   : {0}", ReadBytes(br, 0x000, 12));
        Console.WriteLine("Game Code   : {0}", ReadBytes(br, 0x00C, 4));
        Console.WriteLine("Maker Code  : {0}", ReadBytes(br, 0x010, 2));
        Console.WriteLine("ROM Version : {0}", ReadBytes(br, 0x01E, 1));
        Console.WriteLine("Title ID    : {0}", ReadBytes(br, 0x230, 8));

        Console.WriteLine();
        Console.WriteLine("Done");
        Console.ReadLine();
    }

    private static string ReadBytes(BinaryReader br, int seek, int length)
    {
        byte[] test = new byte[length];
        br.BaseStream.Seek(seek, SeekOrigin.Begin);
        br.Read(test, 0, length);
        return Encoding.UTF8.GetString(test);
    }
}
{% endhighlight %}

<p>There is a lot of room for optimization here, but for a quick test this seems to do the job correctly.</p>

<img src="./images/08/16-01.png" alt="">

<p>
	Using the information extracted from the ROM file and <a href="https://advanscene.com/" target="_blank">advanscene.com</a>,
	I can take the returned Game Code (AEKE) and run a basic search.
</p>

<img src="./images/08/16-02.png" alt="">

<p>Success, my proof of concept works - now it's time to take this into the real world.</p>
